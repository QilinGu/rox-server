<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<!--
  ~ Copyright 2014-2015 Daniel Pedraza-Arcega
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<properties>
    <entry key="User.findByAccessToken">
        <![CDATA[
            MATCH (:Credential {accessToken:{1}})<-[:HAS]-(u:User)
            RETURN ID(u), u.name, u.lastName, u.photoUrl, u.foursquareId
        ]]>
    </entry>
    <entry key="User.findFoursquareIdByAccessToken">
        <![CDATA[
             MATCH (:Credential {accessToken:{1}})<-[:HAS]-(u:User) 
             RETURN u.foursquareId
        ]]>
    </entry>
    <entry key="User.findFriendsByUserFoursquareId">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[:FRIENDS]-(friends:User)
             RETURN ID(friends), friends.name, friends.lastName, friends.photoUrl, friends.foursquareId
        ]]>
    </entry>
    <entry key="User.findFriendsFoursquareIdsByUserFoursquareId">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[:FRIENDS]-(friends:User)
             RETURN friends.foursquareId
        ]]>
    </entry>
    <entry key="User.findLikesByUserFoursquareId">
        <![CDATA[
            MATCH (:User {foursquareId:{1}})-[:LIKES]->(c:Category)
            RETURN ID(c), c.defaultName, c.iconUrl, c.foursquareId 
        ]]>
    </entry>
    <entry key="User.findIdByFoursquareId">
        <![CDATA[
             MATCH (u:User {foursquareId:{1}})
             RETURN ID(u)
        ]]>
    </entry>
    <entry key="User.findLikesFoursquareIdsByUserFoursquareId">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[:LIKES]->(c:Category)
             RETURN c.foursquareId
        ]]>
    </entry>
    <entry key="User.areFriends">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[:FRIENDS]-(:User {foursquareId:{2}})
             RETURN true
        ]]>
    </entry>
    <entry key="User.exists">
        <![CDATA[
            MATCH (:User {foursquareId:{1}})
            RETURN true 
        ]]>
    </entry>
    <entry key="User.create">
        <![CDATA[
             CREATE (:User {name:{1}, lastName:{2}, photoUrl:{3}, foursquareId:{4}})
        ]]>
    </entry>
    <entry key="User.createHasRelationship">
        <![CDATA[
             MATCH (u:User {foursquareId:{1}}), (c:Credential {accessToken:{2}})
             CREATE (u)-[:HAS]->(c)
        ]]>
    </entry>
    <entry key="User.createLikesRelationship">
        <![CDATA[
             MATCH (u:User {foursquareId:{1}}), (c:Category {foursquareId:{2}})
             CREATE (u)-[:LIKES]->(c)
        ]]>
    </entry>
    <entry key="User.createFriendsRelationship">
        <![CDATA[
             MATCH (me:User {foursquareId:{1}}), (friend:User {foursquareId:{2}})
             CREATE (me)-[:FRIENDS]->(friend)
        ]]>
    </entry>
    <entry key="User.update">
        <![CDATA[
             MATCH (u:User {foursquareId:{1}})
             SET u.name = {2}, u.lastName = {3}, u.photoUrl = {4}
        ]]>
    </entry>
    <entry key="User.deleteLikesRelationship">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[r:LIKES]->(:Category {foursquareId:{2}})
             DELETE r
        ]]>
    </entry>
    <entry key="User.deleteFriendsRelationship">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[r:FRIENDS]-(:User {foursquareId:{2}})
             DELETE r
        ]]>
    </entry>
    <entry key="Credential.findByFoursquareAccessToken">
        <![CDATA[
             MATCH (c:Credential {foursquareAccessToken:{1}})
             RETURN ID(c), c.accessToken
        ]]>
    </entry>
    <entry key="Credential.findIdByAccessToken">
        <![CDATA[
             MATCH (c:Credential {accessToken:{1}})
             RETURN ID(c)
        ]]>
    </entry>
    <entry key="Credential.exists">
        <![CDATA[
             MATCH (:Credential {accessToken:{1}})
             RETURN true
        ]]>
    </entry>
    <entry key="Credential.create">
        <![CDATA[
             CREATE (:Credential {accessToken:{1}, foursquareAccessToken:{2}})
        ]]>
    </entry>
    <entry key="Credential.delete">
        <![CDATA[
             MATCH (:User {foursquareId:{1}})-[r:HAS]->(c:Credential)
             DELETE r, c
        ]]>
    </entry>
    <entry key="Poi.findNearestByCategoryFoursquareId">
        <![CDATA[
             MATCH (c:Category)<-[:IS]-(p:Poi)
             WHERE (ACOS( SIN(RADIANS(p.latitude))*SIN(RADIANS({1})) + COS(RADIANS(p.latitude))*COS(RADIANS({1}))*COS(RADIANS(p.longitude-{2})) ) * 6371000) <= {3}
                AND c.foursquareId = {4}
             RETURN DISTINCT ID(p), p.name, p.latitude, p.longitude, p.foursquareId, p.foursquareRating
        ]]>
    </entry>
    <entry key="Poi.findNearestWithHighRating">
        <![CDATA[
             MATCH (p:Poi)
             WHERE (ACOS( SIN(RADIANS(p.latitude))*SIN(RADIANS({1})) + COS(RADIANS(p.latitude))*COS(RADIANS({1}))*COS(RADIANS(p.longitude-{2})) ) * 6371000) <= {3}
                AND p.foursquareRating >= 9
             RETURN DISTINCT ID(p), p.name, p.latitude, p.longitude, p.foursquareId, p.foursquareRating
        ]]>
    </entry>
    <entry key="Category.findByPoiFoursquareId">
        <![CDATA[
             MATCH (c:Category)<-[:IS]-(:Poi {foursquareId:{1}})
             RETURN ID(c), c.defaultName, c.iconUrl, c.foursquareId
        ]]>
    </entry>
    <entry key="Category.findByPartialName">
        <![CDATA[
             MATCH (c:Category)
             WHERE c.defaultName =~ '(?i).*%s.*'
             RETURN ID(c), c.defaultName, c.iconUrl, c.foursquareId LIMIT 5
        ]]>
    </entry>
    <entry key="Category.findByFoursquareId">
        <![CDATA[
             MATCH (c:Category {foursquareId:{1}})
             RETURN ID(c), c.defaultName, c.iconUrl
        ]]>
    </entry>
    <entry key="Recommendation.findNearestByCategoriesLiked">
        <![CDATA[
             MATCH (:Credential {accessToken:{1}})<-[:HAS]-(:User)-[:LIKES]->(c:Category)<-[:IS]-(p:Poi)
             WHERE (ACOS( SIN(RADIANS(p.latitude))*SIN(RADIANS({2})) + COS(RADIANS(p.latitude))*COS(RADIANS({2}))*COS(RADIANS(p.longitude-{3})) ) * 6371000) <= {4}
             RETURN DISTINCT ID(p), p.name, p.latitude, p.longitude, p.foursquareId, p.foursquareRating, c.defaultName
        ]]>
    </entry>
    <entry key="Recommendation.findNearestByCategoriesLikedByFriends">
        <![CDATA[
             MATCH (:Credential {accessToken:{1}})<-[:HAS]-(:User)-[:FRIENDS]-(u:User)-[:LIKES]->(c:Category)<-[:IS]-(p:Poi)
             WHERE (ACOS( SIN(RADIANS(p.latitude))*SIN(RADIANS({2})) + COS(RADIANS(p.latitude))*COS(RADIANS({2}))*COS(RADIANS(p.longitude-{3})) ) * 6371000) <= {4}
             RETURN DISTINCT ID(p), p.name, p.latitude, p.longitude, p.foursquareId, p.foursquareRating, u.name, u.lastName, c.defaultName
        ]]>
    </entry>
</properties>